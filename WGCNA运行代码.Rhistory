## WGCNA 模拟分析过程
##数据选取自https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/FemaleLiver-Data.zip
##数据集包含包含 3600 个测量的表达谱和小鼠的生理定量性状
##学习时间：2022年7月30日~2022年7月31日
##详细说明见：https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/index.html

setwd("D:/TYJ-R/WGCNA/example")
library(WGCNA)
options(stringsAsFactors = FALSE) #必须设置的参数

## 导入数据
femData = read.csv("LiverFemale3600.csv") #导入基因表达数据集
View(femData) #快速查看数据集，行为基因名，列为样品名
datExpr0 = as.data.frame(t(femData[, -c(1:8)])) #删除1到8列，并转置，使得行为样品名，列为基因名
names(datExpr0) = femData$substanceBXH #使得列名为基因名
rownames(datExpr0) = names(femData)[-c(1:8)] #使得行名为样品名
datExpr0= as.data.frame(lapply(datExpr0,as.numeric)) #把data.frame中的字符型数据转换为数值型
gsg = goodSamplesGenes(datExpr0, verbose = 3) 
#goodSamplesGenes() ：迭代过滤具有太多缺失条目的样本和基因
#verbose（详细程度的整数级别，零表示沉默，较高的值使输出逐渐变得越来越冗长）
gsg$allOK
#如果最后一条语句返回 TRUE，则所有基因都通过了切割
#如果为FALSE，则需要使用以下命令：
if (!gsg$allOK)
{
     if (sum(!gsg$goodGenes)>0)
         printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
     if (sum(!gsg$goodSamples)>0)
         printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
     datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}


## 对样本进行聚类（与稍后将出现的聚类基因相反）以查看是否有任何明显的异常值
sampleTree = hclust(dist(datExpr0), method = "average")
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,cex.axis = 1.5, cex.main = 2)
#样品F2_221存在异常，选择一个可以移除有问题的样本的高度切割,如15
abline(h = 15, col = "red")
clust = cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
#cutreeStatic()：使用恒定高度树切割的分层树状图中的模块检测，仅保留大小至少为 minSize 的分支。
table(clust) #确定线下的簇
#集群 1 包含我们想要保留的样本
keepSamples = (clust==1)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
#变量 datExpr 现在包含准备好进行网络分析的表达数据

## 导入生理性状定量数据
traitData = read.csv("ClinicalTraits.csv")
View(traitData) #快速查看表型形状，行为样本名，列为性状数据
allTraits = traitData[, -c(31, 16)];
allTraits = allTraits[, c(2, 11:36) ]
View(allTraits) #删除不需要的数据
femaleSamples = rownames(datExpr)
traitRows = match(femaleSamples, allTraits$Mice)
datTraits = allTraits[traitRows, -1]
rownames(datTraits) = allTraits[traitRows, 1]
collectGarbage() #执行垃圾回收，直到空闲内存指示符显示没有变化

## 在变量datExpr中有表达数据，在变量datTraits中有相应的临床特征。

## 在继续网络构建和模块检测之前，将临床特征与样本树状图的关系可视化
sampleTree2 = hclust(dist(datExpr), method = "average")
traitColors = numbers2colors(datTraits, signed = FALSE) #将特征转换为颜色表示：白色表示低，红色表示高，灰色表示缺少条目
plotDendroAndColors(sampleTree2, traitColors,groupLabels = names(datTraits),main = "Sample dendrogram and trait heatmap")

## 选择软阈值功率：网络拓扑分析
#选择一组软阈值幂
powers = c(c(1:10), seq(from = 12, to=20, by=2))
#调用网络拓扑分析函数
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)

## 作为软阈值功率函数的无标度拓扑拟合指数
par(mfrow = c(1,2))
cex1 = 0.9
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",main = paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],labels=powers,cex=cex1,col="red")
abline(h=0.90,col="red") ## 此行对应于使用 h 的 R^2 截止值

## 作为软阈值功率函数的平均连通性
plot(sft$fitIndices[,1], sft$fitIndices[,5],xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")

## 构建基因网络和识别模块
net = blockwiseModules(datExpr, power = 6,TOMType = "unsigned", minModuleSize = 30,reassignThreshold = 0, mergeCutHeight = 0.25,numericLabels = TRUE, pamRespectsDendro = FALSE,saveTOMs = TRUE,saveTOMFileBase = "femaleMouseTOM",verbose = 3)
table(net$colors) #查看模块数目
mergedColors = labels2colors(net$colors) # 将标签转换为颜色以进行绘图
#绘制树状图和下面的模块颜色
plotDendroAndColors(net$dendrograms[[1]],mergedColors[net$blockGenes[[1]]],"Module colors",dendroLabels = FALSE, hang = 0.03,addGuide = TRUE, guideHang = 0.05)
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs
geneTree = net$dendrograms[[1]]

## 量化模块-特征关联
#将特征基因与外部特征相关联，并寻找最重要的关联
#定义基因和样本的数量
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
#使用颜色标签重新计算 ME
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
#通过相关值对每个关联进行颜色编码
#显示相关性及其 p 值
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",signif(moduleTraitPvalue, 1), ")", sep = "")

## 在热图中显示相关值
par(mar=c(1,1,1,1))
labeledHeatmap(Matrix = moduleTraitCor,xLabels = names(datTraits),yLabels = names(MEs),ySymbols = names(MEs),colorLabels = FALSE,colors = greenWhiteRed(50),textMatrix = textMatrix,setStdMargins = FALSE,cex.text = 0.5,zlim = c(-1,1),main = paste("Module-trait relationships"))

## 基因与性状和重要模块的关系：基因意义和模块成员
#定义包含 datTrait 的权重列的变量权重
weight = as.data.frame(datTraits$weight_g)
names(weight) = "weight"
modNames = substring(names(MEs), 3) # 模块的名称（颜色）
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(geneModuleMembership) = paste("MM", modNames, sep="")
names(MMPvalue) = paste("p.MM", modNames, sep="")
geneTraitSignificance = as.data.frame(cor(datExpr, weight, use = "p"))
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
names(geneTraitSignificance) = paste("GS.", names(weight), sep="")
names(GSPvalue) = paste("p.GS.", names(weight), sep="")

## 模块内分析：鉴定具有高 GS 和 MM 的基因
module = "brown"
column = match(module, modNames)
moduleGenes = moduleColors==module
par(mfrow = c(1,1))
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),abs(geneTraitSignificance[moduleGenes, 1]),xlab = paste("Module Membership in", module, "module"),ylab = "Gene significance for body weight",main = paste("Module membership vs. gene significance\n"),cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
names(datExpr)
names(datExpr)[moduleColors=="brown"]

## 网络分析结果的汇总输出
names(datExpr) #返回分析中包含的所有探针ID
names(datExpr)[moduleColors=="brown"] #返回属于 brown 模块的探测 ID
#探针 ID 与基因名称和普遍认可的识别号（Entrez 代码）联系
https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/FemaleLiver-03-relateModsToExt.pdf
#由于我使用DESeq2软件所以没有探针ID号

## 按模块对权重的重要性对模块进行排序
modOrder = order(-abs(cor(MEs, weight, use = "p")))

## 使用 WGCNA 函数的网络可视化
dissTOM = 1-TOMsimilarityFromExpr(datExpr, power = 6)
plotTOM = dissTOM^7 #转换 dissTOM 以使中等强度的连接在热图中更加明显
diag(plotTOM) = NA #将对角线设置为 NA 以获得更好的绘图
TOMplot(plotTOM, geneTree, moduleColors, main = "Network heatmap plot, all genes")
#请注意，生成热图可能需要大量时间。可以限制基因数量以加快绘图速度； 然而，基因子集的基因树状图通常看起来与所有基因的基因树状图不同。 在以下示例中，我们将绘制的基因数限制为 400
set.seed(5)
nSelect = 400
select = sample(nGenes, size = nSelect)
selectTOM = dissTOM[select, select]
#没有简单的方法可以将聚类树限制为基因子集，因此我们必须重新聚类
selectTree = hclust(as.dist(selectTOM), method = "average")
selectColors = moduleColors[select]
#将相异度视为幂，例如 10，通过有效地改变调色板使情节更具信息性； 将对角线设置为 NA 也可以提高绘图的清晰度
plotDiss = selectTOM^7
diag(plotDiss) = NA
TOMplot(plotDiss, selectTree, selectColors, main = "Network heatmap plot, selected genes")

## 可视化特征基因网络
#重新计算模块特征基因
MEs = moduleEigengenes(datExpr, moduleColors)$eigengenes
#从临床特征中分离体重
weight = as.data.frame(datTraits$weight_g)
names(weight) = "weight"
#将权重添加到现有模块 eigengenes
MET = orderMEs(cbind(MEs, weight))
#绘制特征基因和性状之间的关系
plotEigengeneNetworks(MET, "", marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2), cex.lab = 0.8, xLabelsAngle= 90)
# 绘制树状图
plotEigengeneNetworks(MET, "Eigengene dendrogram", marDendro = c(0,4,2,0),plotHeatmaps = FALSE)
# 绘制热图矩阵
plotEigengeneNetworks(MET, "Eigengene adjacency heatmap", marHeatmap = c(3,4,2,2),plotDendrograms = FALSE, xLabelsAngle = 90)

## 文件导出到VisANT
#重新计算拓扑重叠
TOM = TOMsimilarityFromExpr(datExpr, power = 6)
#读入注解文件
annot = read.csv(file = "GeneAnnotation.csv")
#选择模块
modules = c("brown", "red")
#选择模块探头
probes = names(datExpr)
inModule = is.finite(match(moduleColors, modules))
modProbes = probes[inModule]
#选择对应的Topological Overlap
modTOM = TOM[inModule, inModule]
dimnames(modTOM) = list(modProbes, modProbes)
#将网络导出到 VisANT 可以读取的边缘列表文件中
vis = exportNetworkToVisANT(modTOM,file = paste("VisANTInput-", module, ".txt", sep=""),weighted = TRUE,threshold = 0,probeToGene = data.frame(annot$substanceBXH, annot$gene_symbol) )

## 文件导出到 Cytoscape
TOM = TOMsimilarityFromExpr(datExpr, power = 6)
#读入注解文件
annot = read.csv(file = "GeneAnnotation.csv")
#选择模块
modules = c("brown", "red")
#选择模块探头
probes = names(datExpr)
inModule = is.finite(match(moduleColors, modules))
modProbes = probes[inModule]
modGenes = annot$gene_symbol[match(modProbes, annot$substanceBXH)]
#选择对应的Topological Overlap
modTOM = TOM[inModule, inModule]
dimnames(modTOM) = list(modProbes, modProbes)
#将网络导出为 Cytoscape 可以读取的边缘和节点列表文件
cyt = exportNetworkToCytoscape(modTOM,edgeFile = paste("CytoscapeInput-edges-", paste(modules, collapse="-"), ".txt", sep=""),nodeFile = paste("CytoscapeInput-nodes-", paste(modules, collapse="-"), ".txt", sep=""), weighted = TRUE, threshold = 0.02,
nodeNames = modProbes, altNodeNames = modGenes,nodeAttr = moduleColors[inModule])
save.image()