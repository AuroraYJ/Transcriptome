## 2022年8月9日
## IsoGene（R包）旨在使用几个测试统计数据来识别表达水平相对于增加的剂量具有单调趋势的基因
## IsoGene 软件包提供了五个测试统计量的估计值和p值，用于确定表达水平随实验剂量水平变化的基因子集
## 适用于给药剂量的研究,确定治疗具有某些效果并选择看起来有效和安全的一个或多个剂量
## 数据集至少三个剂量（包括0），且样本大于五个

## 安装affy(必须要先安装affy才能安装IsoGene)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("affy")

## 安装IsoGene
install.packages("IsoGene")
library(IsoGene)

## 查看普通RNA测序数据
data(dopamine) #模拟数据ExpressionSet
require(Biobase) #查看ExpressionSet数据的软件包
express <- data.frame(exprs(dopamine)) #exprs()：从eSet中检索表达式数据
View(express) #1000行26列，行为基因名，列为计量

## 创建微阵列模拟数据
set.seed(2022)
x <- c(rep(1,3),rep(2,3),rep(3,3))
y1 <- matrix(rnorm(4500, 1,1),500,9) #500个没有趋势的基因
y2 <- matrix(c(rnorm(1500, 1,1),rnorm(1500,2,1),rnorm(1500,3,1)),500,9) #500个基因呈上升趋势
y <- data.frame(rbind(y1, y2))
y<-as.data.frame(lapply(y,as.numeric)) #转换dataframe中数据的格式为数值型
y<-y[which(rowSums(y) > 0),] #删除数据框中数值全部为0的行

## 绘制每个剂量的数据点和样本均值
dose <- unlist(pData(dopamine)) #剂量值(数值型)
IsoPlot(dose,express[56,],type="continuous", add.curve=TRUE) #查看第56行基因的计量表达
#IsoPlot()：绘制数据点、每个剂量的样本均值和等渗回归线（可选）
data(exampleData) #模拟数据
x <- c(rep(1,3),rep(2,3),rep(3,3),rep(4,3))
gene1 <- as.numeric(exampleData[1,]) #选择排列在第一行的基因
IsoPlot(x, gene1)

## 计算原始p值
#函数IsoRawp()用于根据排列计算原始p值。需要在此函数中指定剂量水平、基因表达的数据框以及用于近似零分布的排列数。
rawpvalue <- IsoRawp(dose, express, niter=1000) 
#输出对象rawpvalue是一个包含四个组件的列表，其中包含五个测试统计量的p值：two-sided p-values, one-sided p-values,p up-values and p Down-values

## 获得原始p值后调整p值以进行多次测试
rawp<-rawpvalue[[2]] #我选择two-sided p-values作为原始p值
IsoTestBH(rawp, FDR=c(0.05,0.1),type=c("BH","BY"), stat=c("E2","Williams","Marcus","M","ModifM")) #用于在控制FDR的同时调整p值
#结果生成一个基因列表，这些基因具有显着的增加/减少趋势

## 在SAM程序中计算五个SAM(微阵列显着性分析)测试统计的fudge因子
#SAM：基因芯片显著性分析
#fudge fatcor(容差系数)：插入到计算、公式或模型中以允许错误或不确定性的元素；使某些东西与观察到的或期望的结果一致
fudge.factor <- Isofudge(x,y) 
#Isofudge()：在SAM程序中计算五个SAM测试统计的fudge因子

## 针对增加和减少趋势计算的五个测试统计量
x <- c(rep(1,3),rep(2,3),rep(3,3),rep(4,3))
y <- c(rnorm(3,1,1),rnorm(3,2,1),rnorm(3,3,1),rnorm(3,4,1))
#仅针对一个gene（计算单个基因的五个测试统计值）
stat <- IsoGene1(x,y)
#IsoGenem()：计算所有基因的五个测试统计值
IsoGenem(dose,express)

## 创建数据
x.res <- c(rep(1,3),rep(2,3),rep(3,3))
y1 <- matrix(rnorm(90, 1,1),10,9) # 10个基因没有趋势
y2 <- matrix(c(rnorm(30, 1,1), rnorm(30,2,1),rnorm(30,3,1)), 10, 9) #10个基因具有上升趋势
dat.mat <- data.frame(rbind(y1, y2))
dat.mat<-na.omit(dat.mat) #处理对象中的缺失值

## 使用maxT过程计算五个检验统计量
#我没查到maxT具体的计算方法
#为了近似测试统计量的零分布，需要大量的排列，这会导致计算时间的增加
niter=1000 #niter:要使用的排列数
#该函数使用maxT过程计算五个检验统计量（全局似然检验、Williams、Marcus、M 和修改后的 M）的调整p值
pval.maxT <- IsomaxT(x.res, dat.mat,niter) 
IsomaxT(dose, express,niter) 
#IsomaxT 数据量大时，运行时间有点长要有耐心

## 在递增或递减备选方案下从排列中绘制p值图
IsoPlot(x, y)
IsoPlot(x, y, type="ordinal", add.curve=TRUE)
par(mar=c(1,1,1,1))
IsopvaluePlot(x, y, niter = 1000, stat = "Williams") #绘制给定测试的基因（单个基因）的pUp和pDown值

## 获取SAM正则化检验统计量
y1 <- matrix(rnorm(4500, 1,1),500,9)
y2 <- matrix(c(rnorm(1500, 1,1),rnorm(1500,2,1),rnorm(1500,3,1)),500,9)
y <- data.frame(rbind(y1, y2))
x <- c(rep(1,3),rep(2,3),rep(3,3))
#在SAM程序中实现五个SAM测试统计
qqstat <- Isoqqstat(x, y, fudge="pooled", niter = 50)
#SAM测试统计中使用的fudge因子值：fudge="pooled"（函数计算），fudge="none"（不使用fudge因子）

## 在SAM过程中获取增量表
#delta table(增量表)：用于跟踪数据的版本
allfdr <- Isoallfdr(qqstat, ,stat="E2") 

## 使用SAM程序获取重要基因列表
qval <- Isoqval(delta=0.2, allfdr, qqstat, stat="E2")

## 使用SAM程序生成的图
IsoSAMPlot(qqstat, allfdr, FDR = 0.1, stat = "E2") 
#图a：显示了FDR（50%或90%）与delta的关系
#图b：显着基因的数量与delta
#图c：显示了误报的数量（从第 50 个或第 90 个百分位数获得）与delta
#图d：观察到的与预期的（从排列获得）测试统计数据，其中红点是那些称为差异表达的基因。

## 使用带有BH或BY调整的五个检验统计量检验单调趋势
set.seed(2022)
rp <- data.frame(paste("g",1:100), matrix(runif(500,0,0.1), 100, 5))
#BH程序控制错误发现率(FDR):它通过使用每个突变来估计 FDR，其中FDR计算为被错误称为基因数量的中位数除以被称为显着基因的数量
#IsoTestBH()：使用BH-或BY-FDR程序调整五个检验统计量的原始p值
sign <- IsoTestBH(rp, FDR = 0.05, type = "BH", stat = "E2") 

## 剂量反应微阵列数据 (SAM) 的意义分析
#创建微阵列数据
x <- c(rep(1,3),rep(2,3),rep(3,3))
y1 <- matrix(rnorm(4500, 1,1),500,9)
y2 <- matrix(c(rnorm(1500, 1,1),rnorm(1500,2,1),rnorm(1500,3,1)),500,9)
y <- data.frame(rbind(y1, y2))
#IsoTestSAM()：实现了微阵列 (SAM) 的显着性分析，使用 SAM 程序获取重要基因列表
#剂量水平 (x)、基因表达 (y)、排列数 (niter)、FDR 水平、检验统计量和使用 fudge 因子的选项
IsoTestSAM(x, y, fudge=c("none","pooled"), niter=100, FDR=0.05, stat=c("E2","Williams","Marcus","M","ModifM")) 
SAM.obj <- IsoTestSAM(x, y, fudge="pooled", niter=50, FDR=0.05, stat="E2")
SAM.ModifM <- IsoTestSAM(dose, express, fudge="pooled", niter=100, FDR=0.05, stat="ModifM")
#提取重要基因列表
SAM.obj[[1]]
SAM.ModifM.result <- SAM.ModifM[[1]] 
#SAM.ModifM.result对象包含一个六列矩阵：探针ID、数据集中基因的相应行号、观察到的SAM正则化M0检验统计量、q值（从最低错误发现率，该基因被称为显着），所有基因的每个突变测试统计的联合分布获得的原始p值，以及BH-FDR调整后的p值
#Noted:基因越来越多地根据SAM正则化M0测试统计值（即 stat.val）进行排序

#建议在t型检验统计量中使用fudge因子，例如M和修正的M检验统计量
#T检验：适合小样本数据的统计分析方法，通过比较不同数据的均值，研究两组数据之间是否存在差异

save.image()